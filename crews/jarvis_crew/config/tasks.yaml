generate_code:
  description: |
    - Generate reliable and well-structured Python code that effectively addresses the request provided here: {instruction}.
    - Your field of expertise is: {expertise}.
    - The language of the code is: {language}.
    - Conduct a comprehensive review of the generated Python code and the accompanying explanatory text.
    - Ensure the explanatory text is clear, concise, and well-structured, formatted as markdown paragraphs.
    - Highlight the code using markdown code formatting, ensuring it is enclosed in a single code block.
    - Utilize heading level 5 for any titles in the explanatory text (##### heading level 5).
  expected_output: |
    - JSON object with two keys: "code" and "text":
      - "code" should be a string containing the generated code in the language specified in the instruction:
          - Code blocks should be enclosed in triple backticks (```).
          - Specific formats for different languages, e.g.:
            - Python code block should begin with ```python and end with ```.
            - Dart code block should begin with ```dart and end with ```.
            - JavaScript code block should begin with ```javascript and end with ```.
            - JSON code block should start with ```json and conclude with ```.
      - "text" should be a string containing the explanatory text:
        - Text blocks should be formatted as markdown paragraphs.
  agent: developer

generate_diagram:
  description: |
    - Generate a comprehensive and detailed diagram that thoroughly addresses the instruction provided here: {instruction}.
    - Utilize your field of expertise: {expertise}, with a specific focus on: {diagram_type}.
    - Ensure the diagram is clear, accurate, and visually appealing, adhering to established best practices in diagram design.
    - Structure the diagram to facilitate understanding, incorporating distinct clusters that represent different processes and their interconnections.
    - Utilize appropriate diagramming conventions, including precise labeling, effective color coding, and a logical layout that enhances readability.
    - Provide a markdown formatted output that includes both the diagram code and explanatory text, ensuring that the text is informative, relevant, and enhances the understanding of the diagram.
    - Ensure the diagram code is meticulously clear and organized for easy readability and comprehension.
    - Make the explanatory text concise, directly related to the diagram, and provide necessary context to aid understanding.
    - When reviewing the code, ensure there is one single code block and one single text block.
    - If {diagram_type} is Graphviz, adhere to the DOT language structure, which has specific guidelines for defining nodes and edges. Use that structure for the diagram.
    - All diagrams should be read from left to right.
    - For Pytm syntax, use the pytm docs to find the correct syntax.
    - If {diagram_type} is pytm, ensure that the code is properly formatted and syntax is correct as a python code block.
    - Ensure the generated code complies with the requirements outlined below:
      - Ensure the diagram code is valid and executable.
      - Provide a single code block without extra text.
      - Include one code block and one text block.
      - Make the diagram code clear and readable.
      - Correct any syntax errors.
      - Implement security measures for resilience.
      - Review the code for accuracy and best practices in {diagram_type}.
      - Use your expertise in {diagram_type} to enhance code quality.
  expected_output: |
    - JSON object with keys: "diagram_code" and "diagram_text":
      - "diagram_code" is a code block with the generated code in the specified language, clear and organized.
      - "diagram_text" is a string with concise, relevant explanatory text in markdown format.
  agent: diagrammer
